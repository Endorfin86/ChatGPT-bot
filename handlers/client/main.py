from aiogram import types, Dispatcher
from aiogram.types import CallbackQuery
from create_bot import bot
import openai
import os
import time
from data_base import sql_db
from keyboards import keybord_main
from aiogram.dispatcher.filters import Text
from handlers.client.button_func import btn_oppo, btn_premium, btn_endtalk
from handlers.client.ibutton_func import *
from aiogram.types.message import ContentType
from config import OPENAI
from price import *

#API-–∫–ª—é—á openai
openai.api_key = OPENAI

#–≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def voice_handler(message: types.Message):
    if message.voice:
        voice_duration = message.voice.duration
        file_id = message.voice.file_id
        # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è —Å –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        print(f"–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é {voice_duration} —Å ID —Ñ–∞–π–ª–∞ {file_id}")
        await bot.send_voice(
        chat_id=message.chat.id,
        voice=message.voice.file_id,
    )

#—Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç –≤ –Ω–∞—á–∞–ª–µ –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º
async def start_command(message : types.Message):
    subscribe = await bot.get_chat_member(chat_id='-1001911096437', user_id=message.from_user.id)
    await message.delete()
    #–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª —Å id -1001911096437
    if subscribe.status == 'member' or subscribe.status == 'creator':
        print('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º')
        await bot.send_message(message.from_user.id, 'ü§ñ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø ChatGPT, –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ.', reply_markup=keybord_main)
        time.sleep(2)
        await bot.send_message(message.from_user.id, '–ò–ª–∏ –º–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å, –µ—Å–ª–∏ —Ç–µ–±–µ —Å–∫—É—á–Ω–æ üòá')
        print(message.from_user.username)
        await sql_db.sql_create_user(message)
    elif subscribe.status == 'left':
        print('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω')
        await bot.send_message(message.from_user.id, 'ü§ñ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø ChatGPT, –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ.')
        time.sleep(2)
        await bot.send_message(message.from_user.id, '–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ —Å–æ –º–Ω–æ–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª https://t.me/techinpocket')

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def message_user(message : types.Message):
        subscribe = await bot.get_chat_member(chat_id='-1001911096437', user_id=message.from_user.id)
        #–ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—É
        if subscribe.status == 'member' or subscribe.status == 'creator':
            await sql_db.sql_create_user(message)
            user = await sql_db.sql_check_user(message.from_user.id)
            #–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if user == []:
                print('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω')
            else:
                days = await sql_db.sql_check_limit_days(message.from_user.id)
                requests = await sql_db.sql_check_limit_requests(message.from_user.id)
                #–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ
                if days[0]["days"] != 0 or requests[0]["requests"] != 0:
                    #–æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–ª–æ–∞–¥-—Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ id —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    sent_message = await bot.send_message(message.chat.id, 'ChatGPT –¥—É–º–∞–µ—Ç...')
                    sent_message_id = sent_message.message_id
                    context = await sql_db.sql_get_context(message.from_user.id)
                    #–ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    restart_sequence = "Human: "
                    start_sequence = "AI: "
                    if len(context) > 3000:
                        await sql_db.sql_clear_context(message.from_user.id, text='')
                        print('–ü–æ–ª–µ context –æ—á–∏—â–µ–Ω–æ')
                        context = await sql_db.sql_get_context(message.from_user.id)
                    else:
                        pass
                    message_text = context + '\n' + message.text + '.'
                    #–∑–∞–ø—Ä–æ—Å –æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatGPT
                    try:
                        response = openai.Completion.create(
                            model="text-davinci-003",
                            prompt=message_text,
                            temperature=0.5,
                            max_tokens=3000,
                            top_p=1,
                            frequency_penalty=0,
                            presence_penalty=0.6,
                        )
                    except Exception:
                        print('–ü—Ä–∏–≤—ã—à–µ–Ω –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –ª–∏–º–∏—Ç –ø–æ —Å–∏–º–≤–æ–ª–∞–º')
                        await bot.delete_message(chat_id=message.chat.id, message_id=sent_message_id)
                        await bot.send_message(message.from_user.id, '‚õî –ü—Ä–∏–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–∞–º—è—Ç–∏ –±–æ—Ç–∞')
                        await sql_db.sql_clear_context(message.from_user.id, text='')
                        time.sleep(2)
                        print('–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω')
                        await bot.send_message(message.from_user.id, 'üóë –ü–∞–º—è—Ç—å –±–æ—Ç–∞ –æ—á–∏—â–µ–Ω–∞')
                        await bot.send_message(message.from_user.id, 'ü§ñ –ù–∞—á–Ω–∏—Ç–µ —Ä–∞–∑–≥–æ–≤–æ—Ä –∑–∞–Ω–æ–≤–æ –∏–ª–∏ —Å–ø—Ä–æ—Å–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å...')
                    #–ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatGPT

                    answer = response.choices[0].text
                    # for el in answer[0:14]:
                    #     if el == ':':
                    #         answer = answer.split(':')[1]
                    answer = answer.replace('\n', '')

                    #–æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–ª–æ–∞–¥-—Å–æ–æ–±—â–µ–Ω–∏—è
                    await bot.send_message(message.from_user.id, answer, reply_markup=keybord_main)
                    await bot.delete_message(chat_id=message.chat.id, message_id=sent_message_id)
                    #–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ
                    if requests[0]["requests"] > 0 and days[0]["days"] == 0:
                        #–µ—Å–ª–∏ –≤ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–µ—Ç –¥–Ω–µ–π, —Å–Ω–∏–º–∞–µ–º 1 –∑–∞–ø—Ä–æ—Å
                        await sql_db.sql_minus_requests(message.from_user.id, requests[0]["requests"] - 1)
                    requests = await sql_db.sql_check_limit_requests(message.from_user.id)
                    #### print(context)
                    await sql_db.sql_add_context(message.from_user.id, message_text + '\n' + answer)
                else:
                    await bot.send_message(message.from_user.id, '‚ö† –£ –í–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ø–æ–¥–ø–∏—Å–∫–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –µ–µ –ø—Ä–æ–¥–ª–∏—Ç—å')
        else:
            await bot.send_message(message.from_user.id, '–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ —Å–æ –º–Ω–æ–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª https://t.me/techinpocket')

#–ø—Ä–µ–¥–ø—Ä–æ–¥–∞–∂–∞ –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø–∞
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)

#–ø—Ä–æ–¥–∞–∂–∞ –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø–∞
async def successful_payment(message: types.Message):
    req = 0
    prc = 0
    print("Successful payment:")
    payment_info = message.successful_payment.to_python()
    for k, v in payment_info.items():
        print(f"{k} = {v}")
    if message.successful_payment.total_amount // 100 == min_req_price:
        req = min_req
        prc = min_req_price
    elif message.successful_payment.total_amount // 100 == middle_req_price:
        req = middle_req
        prc = middle_req_price
    elif message.successful_payment.total_amount // 100 == max_req_price:
        req = max_req
        prc = max_req_price
    elif message.successful_payment.total_amount // 100 == maxlarge_req_price:
        req = maxlarge_req
        prc = maxlarge_req_price
    elif message.successful_payment.total_amount // 100 == min_day_price:
        req = min_day[1]
        prc = min_day_price
    elif message.successful_payment.total_amount // 100 == middle_day_price:
        req = middle_day[1]
        prc = middle_day_price
    elif message.successful_payment.total_amount // 100 == max_day_price:
        req = max_day[1]
        prc = max_day_price
    elif message.successful_payment.total_amount // 100 == maxlarge_day_price:
        req = maxlarge_day[1]
        prc = maxlarge_day_price

    if prc <= maxlarge_req_price:
        requests = await sql_db.sql_check_limit_requests(message.from_user.id)
        await sql_db.sql_plus_requests(message.from_user.id, requests[0]['requests'] + req)
        await bot.send_message(message.from_user.id, f"–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} {message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
    else:
        days = await sql_db.sql_check_limit_days(message.from_user.id)
        await sql_db.sql_plus_days(message.from_user.id, days[0]['days'] + req)
        await bot.send_message(message.from_user.id, f"–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} {message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")

#–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–Ω–∏–µ –∞–≤—Ç–æ—Ä—Å—Ç–≤–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /—Å–æ–∑–¥–∞—Ç–µ–ª—å
async def check_author(message: types.Message):
    await bot.send_message(message.from_user.id, '–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –†–æ–¥–∏–æ–Ω–æ–≤—É –Ø—Ä–æ—Å–ª–∞–≤—É')

#—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
def register_handlers_client(dp : Dispatcher):
    dp.register_message_handler(check_author, commands=['—Å–æ–∑–¥–∞—Ç–µ–ª—å'])
    dp.register_message_handler(successful_payment, content_types=ContentType.SUCCESSFUL_PAYMENT)
    dp.register_pre_checkout_query_handler(pre_checkout_query, lambda query: True)
    dp.register_message_handler(voice_handler, content_types=types.ContentType.VOICE)
    dp.register_message_handler(start_command, commands=['start'])
    dp.register_message_handler(btn_oppo, Text(equals="üìú –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"))
    dp.register_message_handler(btn_premium, Text(equals="üëë –ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø"))
    dp.register_message_handler(btn_endtalk, Text(equals="üòï –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"))
    dp.register_callback_query_handler(ibtn_starttalk, filter_ibtn_starttalk)
    dp.register_callback_query_handler(ibtn_25, filter_ibtn_25)
    dp.register_callback_query_handler(ibtn_50, filter_ibtn_50)
    dp.register_callback_query_handler(ibtn_100, filter_ibtn_100)
    dp.register_callback_query_handler(ibtn_200, filter_ibtn_200)
    dp.register_callback_query_handler(ibtn_1week, filter_ibtn_1week)
    dp.register_callback_query_handler(ibtn_1month, filter_ibtn_1month)
    dp.register_callback_query_handler(ibtn_6month, filter_ibtn_6month)
    dp.register_callback_query_handler(ibtn_1year, filter_ibtn_1year)
    dp.register_message_handler(message_user)
